<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bhe&#39;s Blog</title>
  
  
  <link href="https://io.bhe.ink/atom.xml" rel="self"/>
  
  <link href="https://io.bhe.ink/"/>
  <updated>2023-06-10T10:25:19.183Z</updated>
  <id>https://io.bhe.ink/</id>
  
  <author>
    <name>Bhe Hongtyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新的 poker 2 到手</title>
    <link href="https://io.bhe.ink/2015/04/24/my-new-poker-2/"/>
    <id>https://io.bhe.ink/2015/04/24/my-new-poker-2/</id>
    <published>2015-04-24T16:11:51.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    
    
    
    <category term="keyboard" scheme="https://io.bhe.ink/categories/keyboard/"/>
    
    
  </entry>
  
  <entry>
    <title>如何理解面向对象编程</title>
    <link href="https://io.bhe.ink/2015/04/24/how-to-understand-object-oriented-programming/"/>
    <id>https://io.bhe.ink/2015/04/24/how-to-understand-object-oriented-programming/</id>
    <published>2015-04-24T15:00:27.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>总算来谈下这个烂大街的话题了。</p><p>面向对象一般会谈继承封装多态，但列举一门理论具备什么特征并不能帮助程序员合理地应用这门理论。</p><p>在传统面向数据和过程的编程方式中， 我们关心的东西有</p><ul><li>特定结构的数据</li><li>针对数据定义的行为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span>&#125; A;</span><br><span class="line"><span class="type">void</span> function <span class="title function_">act</span><span class="params">(A a)</span>;</span><br></pre></td></tr></table></figure><p>实话说，这样的编程手段对于解决问题本身已经够用了。</p><p>但对于现代化的软件工程项目，为了更好地解决开发效率与开发成本等问题，<br>我们需要引入一种更加有效的描述方式。使得开发任务更加顺畅， 开发成本能够有效降低。</p><blockquote><p><code>java</code> 界似乎在远古时期宣扬了一种基于 <code>class</code> 的编程方式，并将这种行为称作 <code>oop</code> 的有效实践。<br>而我们知道， 那端时期 <code>java</code> 界所宣扬的从来就没几个是靠谱的。</p></blockquote><p>首先要摒弃所谓的 <code>class</code> 方式就是面向对象。<br>即使是 <code>javascript</code> 这种基于原型的编程语言，也是满足面向对象原则的。</p><p>只是纯粹描述数据本身的东西， 我们称之为 <code>struct</code>（结构体）, 它具备了类型和实例两个内容。<br>而面向对象，则需要在结构体之上，增加一个可以描述行为的方式， 这种方式一般叫做 <code>method</code> (方法)<br>这里方法虽然看起来和 <code>function</code> 类似， 但是它是提供了数据绑定的， 而函数只和输入输出相关，不关心状态。</p><p>这个东西从实现上，仅仅是个手法而已，和上文所提到的结构体和函数的接合可以达到同样的目的。<br>现代化的编程语言，正是通过这样的变换手法，优化编程的模型而提高生产力的。</p><p>使用面向对象方式编程的开发者，关注的是某一个对象，它所具备的行为（method）。</p><p>好吧，因为类型的扩散，我们还是得考虑多种类型之间的交互， 和前面说的 <code>函数 + 结构体</code> 的方式，<br>差别并不大。<br>为了优化这中情况，程序员能做到的无非就是简化传入参数中的类型，尽量使用平坦的数据类型.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Name</span> n = <span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="title class_">Person</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">setName</span>(n);</span><br><span class="line">p.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>上面的这个例子里， 我们倾向于认为 <code>Name</code> 是一个简单的类型， 而 <code>Person</code> 则是一种具有复杂行为的<br>高级类型。<br>但是，也正是面向对象语言提供的便捷手段，可以通过 <code>封装</code> 手段解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JhonPerson extends Person</span></span><br><span class="line"><span class="title class_">Person</span> jp = <span class="keyword">new</span> <span class="title class_">JhonPerson</span>();</span><br><span class="line">jp.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>面向对象的本质在于 <code>消息传递</code>, <code>方法调用</code> 不过是类 <code>java</code> 语言中的一种实现。<br>为了简化开发任务， 通过扩展组合等手段， 可以轻易地将复杂行为封装到新类型中，但是提供了相同的接口。</p><p>这个例子中， 我们可以体验到面向对象编程中的封装和多态.<br>封装重用了数据， 而多态重用了行为.</p><p>面向对象语言过度地提到继承, 似乎所有关联任务都可以通过 <code>extends</code> 来解决。<br>而我们知道，对象之间的关联关系， 扩展基类意味着需要继承行为和数据,是一种垂直的继承。<br>为了打破这种限制， 提供能够横向扩展的能力， <code>java</code> 引入了 <code>接口</code> ，设计模式则提到了 <code>组合</code>.</p><p>前面提到，方法是一种和类型绑定的行为，如果只是垂直的单继承体系，多态只能在继承类型之间实现。<br>为了能够满足不同类型之间能够完善地支持多态，接口的引入解决了这个问题，但是，事情并没有能够完美地结束。</p><p>在 <code>java</code> 和其他类似语言中，由于函数并不是语言中的第一公民，接口仍然是一个具体的类型，只不过进行了一次间接的多继承.<br>到这里， 我们还是没能够得到我们希望的， 完全基于行为的多态。</p><p>在动态语言中，方法的调用是动态进行的，近似于在运行时直接查找同名方法，因此不存在这个问题。<br>而在静态语言中实现了类似行为的有 <code>go</code> , 虽然最终因为缺少泛型而导致了 <code>interface &#123;&#125;</code> 满天飞。</p><p>好不容易脱离了类型和方法的限制，又回到了如何解决方法和参数类型之间的绑定关系.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总算来谈下这个烂大街的话题了。&lt;/p&gt;
&lt;p&gt;面向对象一般会谈继承封装多态，但列举一门理论具备什么特征并不能帮助程序员合理地应用这门理论。&lt;/p&gt;
&lt;p&gt;在传统面向数据和过程的编程方式中， 我们关心的东西有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特定结构的数据&lt;/li&gt;
&lt;li&gt;针对数</summary>
      
    
    
    
    <category term="programming language" scheme="https://io.bhe.ink/categories/programming-language/"/>
    
    <category term="oop" scheme="https://io.bhe.ink/categories/programming-language/oop/"/>
    
    <category term="编程语言" scheme="https://io.bhe.ink/categories/programming-language/oop/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="面向对象" scheme="https://io.bhe.ink/categories/programming-language/oop/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx 路由杂谈 - rewrite 指令与重定向</title>
    <link href="https://io.bhe.ink/2015/04/18/routing-with-nginx-basic-rewrite-directives/"/>
    <id>https://io.bhe.ink/2015/04/18/routing-with-nginx-basic-rewrite-directives/</id>
    <published>2015-04-18T11:22:40.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在书写 nginx 路由规则的时候， 得保证规则配置的规范， 否则维护起来成本很高。<br>本文简要地讨论了在 rewrite 模块的基础实现的简单路由规则，并解释了常用指令的使用细节。</p></blockquote><h2 id="rewrite-与-location"><a href="#rewrite-与-location" class="headerlink" title="rewrite 与 location"></a>rewrite 与 location</h2><p>首先，这是一个不完整 nginx 虚拟主机配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">    root /service/http;</span><br><span class="line">    index index.php;</span><br><span class="line"></span><br><span class="line">    rewrite ^/api/(.*)+ /index.php?app=api&amp;method=$1 break;</span><br><span class="line">    rewrite ^/index.php/(.*)+ /old_api_warning.html break;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        return 200 &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /index.php &#123;</span><br><span class="line">        return 200 &quot;index.php&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中， 指定的类型可以分为两种。</p><ul><li><code>server</code>,<code>root</code>, <code>index</code>, <code>location</code> 是 <code>ngx_http_core_module</code> 提供的指令</li><li>而 <code>rewrite</code> 则是 <code>ngx_http_rewrite_module</code> 提供的指令之一， 同类的还有常用的 <code>if</code></li></ul><p>简单地概括， nginx 的处理配置流程如下</p><ol><li>进行 rewrite 规则匹配，根据命中规则改写 location。</li><li>如果没有被其他指令中断并退出， 则进入 location 匹配。</li><li>执行匹配成功的 location 区块中的指令。</li></ol><p>而对于 rewrite 系列指令和 location 指令的安排， 在书写配置的时候， 应该先定义好 location ， 因为 location 是和 nginx 和后端服务沟通的桥梁。<br>再根据 location 的需要， 使用 rewrite 将各种各样用户输入的 url 正确地映射到 对应 locaton ， 由 location 中的 proxy 指令转发给后端。</p><p>比如一个常规的 php 站点，有以下类似的 location 配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 静态资源</span><br><span class="line">location /assets &#123;</span><br><span class="line">    root /service/http/assets/;</span><br><span class="line">&#125;</span><br><span class="line"># 入口 php 脚本 位置</span><br><span class="line">location /index.php &#123;</span><br><span class="line">    root /service/http/phpsrc/webroot/;</span><br><span class="line">       # ... 若干 fast-cgi 代理规则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>注意， 这份配置省略了不必要的指令，能够满足大部分的 php 应用的需要。</code></pre><p>有时候，为了优化 url 的展示，或者兼容旧应用的 url 规则， 只是这么简单的两条 location 配置自然是不够用的。这时候我们可以通过 <code>rewrite</code> 规则进行弥补。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rewrite /index.html$ /app/page-default; //兼容旧 url</span><br><span class="line"></span><br><span class="line">rewrite /app/page-(.*) /index.php?app=api&amp;page=$1 break;</span><br></pre></td></tr></table></figure><p>请注意这两条 <code>rewrite</code> 规则区别的在最后一个 <code>flag</code> 参数 <code>break</code></p><pre><code> 可用的 flag 参数还有 `permanent`, `redirect`, `last` 等， 后面分析它们之间的差别。</code></pre><p>多出来的 <code>break</code> 参数作用会使得 <code>rewirte</code> 指令的跳转方式发生变化:</p><ul><li>没有 flag 的 rewrite 指令完成 location 改写之后 ，继续往下寻找其他 <code>rewrite</code> 规则， 看看有没有符合要求的。如果没有， 那么进入 <code>location</code> 匹配。</li><li>带 <code>break</code>， 跳过其他所有 <code>rewrite</code> 规则， 进入 <code>location</code> 匹配</li></ul><p>这里简单总结一下:</p><ul><li>如果 某一条 <code>rewrite</code> 规则命中直接转发给后端应用，那么应该加上一个 <code>break</code> 标记。</li><li>如果 <code>rewrite</code> 规则起补充作用，还需要其他规则配合完成， 那么不带第三个的 <code>flag</code> 参数。</li></ul><p>以上说的 <code>rewrite</code> 规则属于 nginx 的内部重定向规则， 也就是说， 用户外部看到的 url 依然是他输入的 url ， 而转给后端应用的 <code>$uri</code> ， 则已经是 nginx 改写之后的结果。</p><p>如果需要进行显式地外部重定向， 需要借助 <code>redirect</code> , <code>permanent</code> 这两个 flag 进行 302 和 301 重定向.<br>它的行为和 <code>break</code> 类似， 区别在于 nginx 会中断流程， 通过 http 请求告诉用户端进行重定向，<br>也就是这次请求不需要进过后端服务， 由 nginx 全职负责。</p><p><code>rewrite /error.html$ /error2.html redirect;</code></p><h3 id="break-和-last-区别"><a href="#break-和-last-区别" class="headerlink" title="break 和 last 区别"></a>break 和 last 区别</h3><p>这两个 flag 都会中断当前 rewrite 流程， 不再继续匹配后续的 rewrite 指令。</p><p>wiki 上是这么写的</p><blockquote><p>stops processing the current set of <code>ngx_http_rewrite_module</code> directives and starts a search for a new location matching the changed URI</p></blockquote><p>如果是在 <code>server</code> 的顶级部分， 那么它们的作用是相同， 跳过剩下的 rewrite 指定， 进入 location 匹配。<br>如果 rewrite 是在 <code>server</code> 区块顶级 if 内部， 和直接放在 server 下级的  rewrite 行为是一致的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite /error1.html /error.html break;</span><br><span class="line">    rewrite /error2.html /error.html last;</span><br><span class="line"></span><br><span class="line">    if ( $arg_version = &quot;1.1&quot; ) &#123;</span><br><span class="line">        rewrite /error3.html /error.html break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = error.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的 rewrite 的跳转行为是相同的， 进入 location 匹配流程。</p><p>而两者的区别， 在于当 rewrite 指令存在于 <code>location</code> 区块中时, 见例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location = index.php &#123;</span><br><span class="line">    if ( $arg_q  = &quot;&quot; ) &#123;</span><br><span class="line">        rewrite /index.php /error.html last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">location = error.html &#123;</span><br><span class="line">    if ( $arg_test ~= &quot;&quot; ) &#123;</span><br><span class="line">        rewrite /error.html /error-test.html break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个 location , 如果 <code>q</code> 参数为空， 那么将展示错误页面。</p><p>第二个 location ， 如果 <code>test</code> 参数不为空， 通过 rewrite 规则，使用另外一个 error-test.html,<br>但 location 不变</p><pre><code>注意， 这里并没有一个 `location = error2.html` 的匹配规则</code></pre><p>从这个 case 的结果， 可以明显得区分两个指令之间的细微差别</p><ul><li>last 跳出 location 块， 重新进行 location 匹配</li><li>break 跳过 location 下的后续 rewrite 规则， 执行其他指令。</li></ul><p>所以 last 的特殊在于重新进行 location 匹配，  这也就是为什么会从</p><p><code>locaton = index.php</code></p><p>转向</p><p><code>locaton = error.html</code></p><p>所以一般情况下， 使用 <code>break</code> 指令会相对安全， 不会造成循环重定向。</p><p>比如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> = error.html &#123;</span><br><span class="line">    <span class="attribute">rewrite</span> /<span class="literal">error</span>.html /<span class="literal">error</span>.html  <span class="literal">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$arg_q</span> = <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">404</span> <span class="string">&quot;not q&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="comment">#其他 fastcgi 配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> = error.html &#123;</span><br><span class="line">    <span class="attribute">rewrite</span> /<span class="literal">error</span>.html /<span class="literal">error</span>.html <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个例子，完成了 rewrite 指令之后，break 指令使得后续的其他 rewrite 规则失效, 接着进行 proxy.<br>第二个例子会导致不断地进行 location 匹配， 最终导致 nginx 返回 500.</p><p>返回结果是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 500 Internal Server Error</span><br><span class="line">Server: nginx/1.6.3</span><br><span class="line">Date: Sat, 18 Apr 2015 12:10:49 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 192</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><pre><code>注：nginx 会记录同一条 rewrite 规则的执行次数，如果超过10次，将自动触发 500 进行自我保护。</code></pre><p><strong>小结</strong></p><p>这里构造了两组例子用来说明 <code>last</code> 和 <code>break</code> 两个 flag 参数行为上的不一致。<br>并不是说 rewrite 规则在  server 和 location 上下文中的行为不一致， 而是他们的行为特征很容易造成误解。</p><p>两者的本质区别在于是否<strong>重新</strong>进行 <code>location</code> 匹配，所以当在 location 上下文 进行 last rewrite时。<br>对于不熟悉 rewrite 指定的其他人容易造成误解。</p><p>所以还是前文所提到的观点， 尽可能地将 rewrite 和 location 离开来。 在 location 中进行 rewrite， 容易造成重定向问题。</p><pre><code>由于 rewrite 模块的 `rewrite` 和 `if` 指令会使得 nginx的路由规则出现较多的逻辑和分支跳转， 在维护性上是比较糟糕的，并不推荐过多地进行使用， 本文只是从行为和特性上分析了这些指令，并不代表支持过度使用 rewrite 指令。</code></pre><h2 id="return-指令的应用"><a href="#return-指令的应用" class="headerlink" title="return 指令的应用"></a>return 指令的应用</h2><p>在 <code>rewrite</code> 模块中， 有一条非常有用的指令 <code>return</code>, 用于直接返回客户端指定的状态码。<br>甚至支持指定文本内容和url， 相比起使用 <code>rewrite</code> 指令302进行曲线救国，要简便地多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location = /index.php &#123;</span><br><span class="line">  if ( $arg_q = &quot;&quot; ) &#123;</span><br><span class="line">    return 302 /page_not_found.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if ( $arg_id = &quot;&quot; ) &#123;</span><br><span class="line">    return 404 &quot;page not found&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return 200 &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于常规的基于 url 提供服务的应用， 基础的 rewrite 指令配合已经足够完成大部分任务。</p><p>下一篇文章再聊聊基于条件，变量和更加复杂的上下文, 完成进行路由规则匹配.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在书写 nginx 路由规则的时候， 得保证规则配置的规范， 否则维护起来成本很高。&lt;br&gt;本文简要地讨论了在 rewrite 模块的基础实现的简单路由规则，并解释了常用指令的使用细节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rewr</summary>
      
    
    
    
    <category term="nginx" scheme="https://io.bhe.ink/categories/nginx/"/>
    
    <category term="web server" scheme="https://io.bhe.ink/categories/nginx/web-server/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP Pro : 弱类型</title>
    <link href="https://io.bhe.ink/2015/04/11/php-pro-work-with-weak-type/"/>
    <id>https://io.bhe.ink/2015/04/11/php-pro-work-with-weak-type/</id>
    <published>2015-04-11T16:19:44.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么-php-这么流行"><a href="#为什么-php-这么流行" class="headerlink" title="为什么 php 这么流行"></a>为什么 php 这么流行</h2><p>php 的流行已经不用再提及了， 那么， php 具有哪些优点使得它如此流行呢？</p><ul><li>接近 c(&lt;5.2) 和 java (~&gt;5.3.8) 的语法</li><li>弱类型， 编码成本极低</li><li>特定任务所需的基础库完备</li></ul><p>优点 1 就不多说了， 用的人都知道。基础的 <code>function</code> 和 <code>class</code> 语法都极其相似。<br>优点 3 涉及的话题很多，暂时不进行展开, 这里重点聊下 php 中的弱类型.</p><h2 id="php-和-类型"><a href="#php-和-类型" class="headerlink" title="php 和 类型"></a>php 和 类型</h2><p>先看一组普通的 PHP 语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;; <span class="comment">//定义一个简单的 class A</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">1.1</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable">$a</span>(); <span class="comment">//类的名字都是直接计算出来的</span></span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;; <span class="comment">//你没看错， 这是匿名函数， php 中叫闭包。</span></span><br></pre></td></tr></table></figure><p>从上可以看到的 php 语句的两个重要特点</p><ul><li>可以给一个变量名赋上随便哪种值，随便什么类型，什么时候，重复赋值也行。</li><li>变量名以 <code>$</code> 开头， 后面会聊为什么这里有一个 <code>$</code></li></ul><p>这一点让 php 开发者写代码的时候非常轻松。很多东西都不需要考虑。这也就是为什么 php 容易上手。</p><p>接下来是一个基础的函数定义代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunc</span>(<span class="params"> <span class="variable">$a</span> = <span class="number">1</span></span>) </span>&#123; <span class="comment">//一个带默认值的参数 $a</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> === <span class="number">2</span> || <span class="variable">$a</span> === <span class="number">1</span>) &#123; <span class="comment">// int 类型的严格判断</span></span><br><span class="line"><span class="keyword">return</span>  <span class="variable">$a</span>+<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$a</span>)&amp;&amp; <span class="keyword">isset</span>(<span class="variable">$a</span>[<span class="number">0</span>]) ) &#123; <span class="comment">// 数组类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$a</span> is unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们看到， php 的弱类型不仅体现在语句上， 函数的定义的参数和返回值也是没有类型的。 对于 php 而言， 返回值是 <code>int</code> 或者 <code>void</code> （在 php 里应该认为是 null） 类型， 在函数定义中没有区别，参数也是。</p><pre><code>所以用 php 写出无法维护的代码是轻而易举的事情。</code></pre><p>在实际使用过程中， php 开发者经常干的一件事情是把函数的返回值打印出来，看下数组结构， 找到自己需要的内容。再接着写代码.</p><pre><code>默认情况下，php 的函数和类型都是全局的， 5.3 中引入的命名空间改善了这一点。</code></pre><p>当然, 例子中的做法会让使用这个函数的人很头疼， 除非是非常常用以至于用户不可能误解的接口，否则别这么做.</p><pre><code>jQuery 的 $() 是一个很好的例子，很多人认为是很反人类的设计.但是显然它的用户觉得用起来很爽</code></pre><p>代码中的 <code>!empty($a)</code> , 这个也是很常用的技巧， 用于判断一个变量是不是 <code>null</code>, 空字符串， <code>False</code> ，空数组， 等等等等(当然包括了变量不存在，数组下标和字段 key 不存在等等)， 也就是直觉中所有的空值都会命中，很方便不是吗。</p><p>php 进行真假值判断时， 会尽可能地进行类型传唤，除了数字类型和 null， 字符串也会尽可能地转换成数字再转换到 true、false。甚至自定义类型，也可以通过实现特殊接口， 支持 <code>empty</code> 操作。 </p><blockquote><h3 id="empty-的陷阱"><a href="#empty-的陷阱" class="headerlink" title="empty() 的陷阱"></a>empty() 的陷阱</h3><p>针对字符串类型进行 <code>empty()</code> 操作，比如 <code>&quot;0   &quot;</code>， 和 <code>&quot;0&quot;</code> 在 <code>empty()</code> 中是不一样的， 虽然在 intval 函数中， 它的结果都是 0。 也就是， 只有 <code>&quot;&quot;</code>，<code>&quot;0&quot;</code> 这两个特殊的字符串， 其他长度大于0 的字符串都会认为是非 empty 的。</p><p>empy 看起来像是一个普通的库函数， 但是它是一个特殊的指令， 并不是函数调用。类似于 <code>echo</code> 和 <code>isset</code>。 这也留下一个 bug， empty 只能针对左值操作，也就是变量名.<br>而对于表达式，比如 <code>empty(&quot;a&quot;)</code> , 在目前的 php 语法中是不合法的， 必须提前计算结果并赋值给一个临时变量。 这个小小的麻烦，在未来的 php 版本中说不定会优化掉。</p></blockquote><blockquote><h3 id="isset-和-empty-的区别"><a href="#isset-和-empty-的区别" class="headerlink" title="isset 和 empty 的区别"></a>isset 和 empty 的区别</h3><p>isset 只用来判断数组下标或者变量是否为 null 。它不能区分 null 和 变量未定义.<br>对于 <code>$a=array( &quot;a&quot;=&gt; null)</code>, <code>isset($a[&quot;a&quot;])</code> 和 <code>isset($a[&quot;b&quot;])</code> 都返回 <code>false</code>.</p><p>在 php 中， 不存在是一个模糊的定义，和 null 几乎是等同的。千万不要在代码中依赖一个变量是否定义这种模糊的条件， 这种奇葩的行为只有 javascript 才会关心, 毕竟我么谈的是弱类型语言, 存在感这种东西太弱了。</p><p>然而， php 从 c 中抄来的常量定义 define(“A”, a), 是可以用 defined(“A”) 进行判断的.<br>比如 <code>defined(&quot;DEV_MODE&quot;)</code> 判断应用是否运行在开发模式下.</p></blockquote><pre><code>关于 isset 和 empty 后续的面向对象章节中会谈到。</code></pre><p>在静态类型语言的使用者眼里， php 大概就是一种到处都是 object 和 强制转型的及其不安全的语言了。</p><h3 id="又爱又恨的数组"><a href="#又爱又恨的数组" class="headerlink" title="又爱又恨的数组"></a>又爱又恨的数组</h3><p>Array 应该是 php 使用频繁的基础类型了。 也就是它导致了 ide 几乎没办法正确地分析代码中函数返回值和参数的正确性, 因为一切行为都因为 array 的存在而过于灵活。</p><p>在 php 中， 数组和字典（或者说hashmap）, 是混合存在的， 都叫 array。 这个混杂的类型，在处理 key 为数组的hash 数据时，很容易埋下 bug。</p><p>相比之下，javascript 还是严格地划分了 array 和 object 之间的区别。</p><h3 id="使用-array-模拟-struct"><a href="#使用-array-模拟-struct" class="headerlink" title="使用 array 模拟 struct"></a>使用 array 模拟 struct</h3><p>在实际使用中， 针对需要返回复杂结果，但又不需要进行面向对象的包装时，习惯使用 array 做为返回值， 作为 <code>struct</code> 的替代用法.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunc2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>( <span class="string">&quot;a&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;b&quot;</span> =&gt;<span class="number">2</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">someFunc2</span>(); </span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>[<span class="string">&quot;a&quot;</span>];</span><br></pre></td></tr></table></figure><p>或者使用 array 做为参数， 避免函数的参数过多带来的麻烦。相对于使用 call_user_func 模拟函数调用要更加自然方便。</p><p><code>$c = someFunc3( array( &quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2));</code></p><p>这里应该说， php 的弱类型特别发挥地淋漓尽致， 虽然可能很多开发者并没有意识到这点， 但是不要紧，这并不妨碍他们用最舒适的方式使用 php。</p><p> php 开发者在写代码过程中， 心里只要了解一个函数、方法的作用，剩下的就是填充合适的参数和获取返回值，用 empty， isset 等函数进行判断是否空返回值。</p><h2 id="PHP-和"><a href="#PHP-和" class="headerlink" title="PHP 和 $"></a>PHP 和 $</h2><p>和同样是弱类型的语言 javascript 相比， php 有什么特点呢？我能想起来的最显眼的区别， 就是 php 的变量名必须有一个 $ 符号。</p><pre><code>当然，这不过是当年从 perl 遗传下来的。</code></pre><p>那么这个 <code>$</code> 符号， 除了必须写上，还有什么实际用途吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> is b&quot;</span>;</span><br></pre></td></tr></table></figure><p>哦, 原来如此。<code>$</code> 在输出字符串的过程中用于定位字符串中的变量，在输出的过程中会替换为实际的变量内容。</p><pre><code>对于 php 而言， “” 风格的字符串意味着需要进行变量的替换， 而 ‘’ 则说明直接输出内容就行了。这个原则甚至适用与数组的 key .</code></pre><p>如果如果变量名和后续内容没有空格等区分，那么 <code>&quot;$&#123;a&#125;isb&quot;</code> , 通过加大括号就可以解决了。</p><p>这样连数组类型也支持了  </p><p><code>echo &quot;$&#123;a[0]&#125;isb&quot;</code></p><p>也就是</p><p><code>&quot;$a is b&quot;</code> 等价于 <code>$a . &quot;is b&quot;</code></p><pre><code>注: 在 php 中， `.` 英文句号用于连接字符串.其他语言中常用的 `+` 加号</code></pre><p>总之， php 的约束很弱，可以很灵活地使用，也很容易失控，这也就是为什么 php 构建大型系统很困难。除了性能问题， 还存在对使用者的约束很弱。</p><p>但同时也存在好处， 弱类型和宽泛的约束，使得框架的实现上灵活， 可以轻松实现非常强大的特性，（后面在面向对象和类加载中会谈到）毕竟 php 开发者也习惯了基于约定编程的，只要团队不大，通过开发约定也可能解决这个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么-php-这么流行&quot;&gt;&lt;a href=&quot;#为什么-php-这么流行&quot; class=&quot;headerlink&quot; title=&quot;为什么 php 这么流行&quot;&gt;&lt;/a&gt;为什么 php 这么流行&lt;/h2&gt;&lt;p&gt;php 的流行已经不用再提及了， 那么， php 具有哪些优</summary>
      
    
    
    
    <category term="php" scheme="https://io.bhe.ink/categories/php/"/>
    
    <category term="tutorial" scheme="https://io.bhe.ink/categories/php/tutorial/"/>
    
    <category term="book" scheme="https://io.bhe.ink/categories/php/tutorial/book/"/>
    
    
  </entry>
  
  <entry>
    <title>Apache nio client 源码阅读笔记</title>
    <link href="https://io.bhe.ink/2014/12/18/notes-about-apache-nio-client-source-code/"/>
    <id>https://io.bhe.ink/2014/12/18/notes-about-apache-nio-client-source-code/</id>
    <published>2014-12-18T07:34:29.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-部分主要类型功能简介"><a href="#1-部分主要类型功能简介" class="headerlink" title="1. 部分主要类型功能简介"></a>1. 部分主要类型功能简介</h2><p><strong><code>org.apache.http.impl.nio.client.HttpAsyncClients</code></strong></p><p>它是一个比较接近业务层的介面, 提供一系列工厂方法, 用于构造 启动对 <code>HttpAsyncClient</code> 的构造和配置工作</p><p><strong><code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code></strong></p><p>工厂方法创建buidler 用于构造具体的client.</p><p>从属性可以看出来, 使用策略模式, 支持各种类型策略的注入, 线程工厂, http接受&#x2F;处理回调函数等等, cookie&#x2F;auth 等http协议的内容也在这个地方处理.</p><p>它的 <code>build</code> 方法生成  <code>org.apache.http.impl.nio.client.CloseableHttpAsyncClient</code> 的子类型</p><p><strong><code>org.apache.http.impl.nio.client.InternalHttpAsyncClient</code></strong></p><p>默认的 HttpAsyncClient , 使用之前需要调用 start 方法.</p><p>http 请求任务通过 execute 方法提交, 其实现原理是<br>生成一个fureture对象用作和用户沟通,<br>再生成一个 <code>org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl</code> 实例, 由它启动和 io loop 的数据交换<br>最后把 future 对象返回给用户层</p><p><strong><code>org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl</code></strong></p><p>InternalHttpAsyncClient 会默认调用他的start方法.</p><p>在 start() 中, exec.prepare 负责向 stat 中填充数据和 request 配置</p><p>requestConnection() 向 connection manager 发起 connection , 并向他注册了一个 future callback, 意味着, conn manager 会向 ExchangeHandler 回调事件, 从而间接地向用户层发起回调.</p><p><strong><code>org.apache.http.nio.conn.NHttpClientConnectionManager</code></strong></p><p>负责接管 client 提交的http请求</p><p>关于接受请求的方法签名如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;NHttpClientConnection&gt; <span class="title function_">requestConnection</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpRoute route,</span></span><br><span class="line"><span class="params">        Object state,</span></span><br><span class="line"><span class="params">        <span class="type">long</span> connectTimeout,</span></span><br><span class="line"><span class="params">        <span class="type">long</span> connectionRequestTimeout,</span></span><br><span class="line"><span class="params">        TimeUnit timeUnit,</span></span><br><span class="line"><span class="params">        FutureCallback&lt;NHttpClientConnection&gt; callback)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>HttpRoute 和请求的 ip 相关, 有一个相关的参数 MaxRequestPerRoute, 意思就是对同一个主机发起的最大连接数</p></li><li><p>connectTimeout tcp 等待建立 connection 的等待时间, 对方主机的tcp通道建立需要一定的时间</p></li><li><p>connectionRequestTimeout 表示排队等待 connection 的时间具体参考下文的 lease time</p><p>  ps1: connection 可以认为是一个保持着的长连接资源, 也就是 tcp 通道<br>  ps2: route 里面如果配置了 proxyhost(http代理), 那么这时候就起作用了</p></li></ul><p>释放请求 releaseConnection, 这是真的将一个 connection 实例从 pool里拿出来, 中止链接, 回收实例</p><p>所以它完成的事情也不多, 就是向 pool 里注册和释放 connection</p><p><strong><code>org.apache.http.impl.nio.conn.CPoolProxy</code></strong></p><p>上文提到的 pool , 连接池代理,通过 lease 方法注册新的请求</p><ol><li><p>首先 创建一个 org.apache.http.nio.pool.LeaseRequest#LeaseRequest 实例, 持有传入的参数</p><ul><li>上文提到的 connectionRequestTimeout , 这里叫 lease time , 也就是 lease request 的 dealine</li></ul></li><li><p>在 processPendingRequest 中, 检查deadline ,如果到了, requestTimeout 触发, 触发TimeoutException (注意类型)</p><ul><li>也就是说, lease request 创建完毕, 发现已经到dealine ,那么就不向 pool 索取 connection 了, 直接退出</li></ul></li><li><p>接着向 routeToPool 和 route 对应的 connection pool (org.apache.http.nio.pool.RouteSpecificPool)  , 如果没有的话, 发起一个新的pool.</p></li><li><p>接着从 pool 中索取一个 connection (org.apache.http.nio.reactor.SessionRequest) , 如果没有, 创建新的 pool , 将 socketTimeout 配置进去</p><p> 创建新的connection , 需要检查route对应的connection数量是否达到上限.<br> 对于拿到的新的 connection, 将上文所提到的 requestTimeout 作为 connection 的 connectionTimeout.</p></li></ol><p><strong><code>org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor</code></strong></p><p>nio 反应堆的默认实现, 继承于 org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor , 负责发起worker线程, 并维护和 Nio api 之间的交互</p><pre><code>worker 的个数在创建 conm 的时候决定.默认配置中通过 `java.lang.Runtime#availableProcessors` 决定,也就是 jvm 检测到的当前可用处理器数.</code></pre><h2 id="总结和体会"><a href="#总结和体会" class="headerlink" title="总结和体会"></a>总结和体会</h2><p>关于实践</p><ol><li>不应该在callback中使用耗时的操作, 这会导致阻塞io线程, 从而降低io部分的工作效率, 成为系统瓶颈.</li><li>实际使用中发现，保持长链接的情况下， 存在由于链接到期断开导致刚刚放入连接池的新链接瞬间断开的情况， 这种情况需要按需重新发起链接. 我这边统计到的发生率不超过 0.1%.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-部分主要类型功能简介&quot;&gt;&lt;a href=&quot;#1-部分主要类型功能简介&quot; class=&quot;headerlink&quot; title=&quot;1. 部分主要类型功能简介&quot;&gt;&lt;/a&gt;1. 部分主要类型功能简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;org.apache.htt</summary>
      
    
    
    
    <category term="java" scheme="https://io.bhe.ink/categories/java/"/>
    
    <category term="sourcecode" scheme="https://io.bhe.ink/categories/java/sourcecode/"/>
    
    <category term="nio" scheme="https://io.bhe.ink/categories/java/sourcecode/nio/"/>
    
    
  </entry>
  
  <entry>
    <title>vimer入手 KBC poker2 数天的感想</title>
    <link href="https://io.bhe.ink/2014/06/15/a-vimers-kbc-poker2-review/"/>
    <id>https://io.bhe.ink/2014/06/15/a-vimers-kbc-poker2-review/</id>
    <published>2014-06-15T15:04:53.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>买来平时写代码用的, archlinux+kde+vim下开发 php 主要应用, 偶尔用用phpstorm和pycharm 看看其他不经常维护的项目.</p><p>前几天在这个搜索下6x键机械键盘, 看来看去感觉 poker2 的感觉比较好, 就直接去购了台茶轴的. 以前用的 das, 感觉玩游戏还行, 就是有点吵人, 后来不玩游戏就送人了.所以工作的参考虑下其他人说法, 估计茶轴应该比较合适.</p><p>这两天用下来感觉还不错. 手感不错, 相对于笔记本的巧克力键盘稍微键程大了一点点, 熟悉之后也没什么不舒服的.</p><p>回到键位的配置上吧, 第一个碰上的问题就是 <code>esc</code> 键, 问题在于 <code>~</code>.</p><p>现在要按 <code>shift+fn+esc</code>, 稍微有点困难. 绑定到 <code>pn+esc</code> , 总算稍微方便点.<br>理论上最好的键位应该 shift+esc 贴近原来的使用习惯, 毕竟 <code>`</code> 很少用上.</p><p>bash 的 <code>` `</code> 反正可以用 <code>$()</code> 替代. 另外通过disp改右 ctrl 为 <code>~</code>, 但是感觉用着比较别扭.</p><p>第二问题就是熟悉 fx 改成fn+数字. 平时倒没啥问题, 就是 kwin 的一些快捷键多少会用上 fx 键, 比如 alt+f2. 或者ide里的一些调试工具, fx 还是挺常用的, 用的时候总要稍稍翻译一下.</p><p>And, 方向键, 虽玩游戏喜欢用 wasd, 但是用 fn+wasd 操作方向键的方式, 需要适应一下. 通常第一反应还是右手去按右下的按键. 虽然是一个很简单的操作, 着实是成了习惯成自然了.</p><p>买的时候附送了6个无刻彩色键帽, 我换掉了 <code>fn</code> <code>win</code> <code>pn</code>, 平时操作的时候比较视觉上方便定位.</p><p>毕竟是拿来干活的工具, 暂时没太折腾.</p><p>附照</p><p><img src="http://ww4.sinaimg.cn/large/77930e11gw1era4l06e8kj20dw0ad75n.jpg" alt="kbc poker2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;买来平时写代码用的, archlinux+kde+vim下开发 php 主要应用, 偶尔用用phpstorm和pycharm 看看其他不经常维护的项目.&lt;/p&gt;
&lt;p&gt;前几天在这个搜索下6x键机械键盘, 看来看去感觉 poker2 的感觉比较好, 就直接去购了台茶轴的. 以</summary>
      
    
    
    
    <category term="keyboard" scheme="https://io.bhe.ink/categories/keyboard/"/>
    
    <category term="toy" scheme="https://io.bhe.ink/categories/keyboard/toy/"/>
    
    
  </entry>
  
  <entry>
    <title>新 iOS 杂谈</title>
    <link href="https://io.bhe.ink/2014/06/04/some-words-about-the-new-ios/"/>
    <id>https://io.bhe.ink/2014/06/04/some-words-about-the-new-ios/</id>
    <published>2014-06-04T07:28:44.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>这里对发布会的怨念很大, 发点正能量</p><p>这次的 WWDC, 我个人感觉 Apple 是拿出了诚意了, 只是还没正式发布, 结果还不知道怎么样. </p><p>大学的时候打工买了台 milestone 2 , 对 android 失望得不得了, 后来就一直是用着 iPhone. 再后来年会中了台 N4, 玩了几天, 发现 android 4.x 是稍微好了点, 但是也没什么吸引力, 就送人了.</p><p>我曾经对比过 a 和 i 的区别, 后来我觉得原因就是环境. </p><p>iphone 有 App Store 和 iTunes, android 有什么呢? </p><p>我个人感觉, iPhone 并不是完美无缺才超越了 Android, 相反, 它很多东西没做好. safari 很一般, App 都是沙箱里孤立的, 记事本之类的系统应用做得也不是太舒服. </p><p>在 IOS 8, intent 和 第三方输入法反映了苹果确定在一定程度开放了它的这个操作系统. 但是这是一件顺其自然的事情, </p><p>回头说说安卓? 我觉得它早早走上一条不归路, 过于开放, 乱七八糟. 以至于我都不知道怎么用它了.</p><p>大排档和高级餐厅的差别, 并不只是相差在价格上, 而是体验, 这时候解决的已经不是温饱问题. 对于一个只需要吃饱的人, 大排档够了, 但瞎 BB 酒店太贵这种心态可不少见.</p><p>说实在, 我觉得问题在于, 我希望的手机是好用, 又不费神. 毕竟在这东西花时间又不是工作内容, 没啥回报. 自从买了 kof-i 之后我就再也没买过任何的游戏了, 我也不觉得 iOS 平台能产生游戏性超过任天堂或者索尼的游戏, 就算哪天它把任天堂收购了, 那又怎样.</p><p>我只当它是手机, 能胜任移动助理功能, 至于其他的, 已经超出了它所应该拥有的意义了. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里对发布会的怨念很大, 发点正能量&lt;/p&gt;
&lt;p&gt;这次的 WWDC, 我个人感觉 Apple 是拿出了诚意了, 只是还没正式发布, 结果还不知道怎么样. &lt;/p&gt;
&lt;p&gt;大学的时候打工买了台 milestone 2 , 对 android 失望得不得了, 后来就一直是用着</summary>
      
    
    
    
    <category term="Apple" scheme="https://io.bhe.ink/categories/Apple/"/>
    
    <category term="iOS" scheme="https://io.bhe.ink/categories/Apple/iOS/"/>
    
    <category term="mobile" scheme="https://io.bhe.ink/categories/Apple/iOS/mobile/"/>
    
    
  </entry>
  
  <entry>
    <title>PHPDaemon 异步编程</title>
    <link href="https://io.bhe.ink/2014/03/23/asynchronous-programming-with-phpdaemon/"/>
    <id>https://io.bhe.ink/2014/03/23/asynchronous-programming-with-phpdaemon/</id>
    <published>2014-03-23T19:39:27.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>phpdaemon, 基于异步网络请求的应用服务框架</p><p>一直以来, php给人的印象就是一个单进程同步的编程语言, 其魅力在于简单, 直观,<br>学习成本低, 容易上手, 所以市场占有率很高.</p><p>流行的php模式, 从几年前的 apache + mod-php, 到今天的nginx + php-fpm,<br>在php编程层面上都是一直的.<br>开发者的开发的代码都是居于”php进程会同步执行所有的代码逻辑之后退出并释放”<br>这么一种假设, 不用考虑多线程的锁问题, 大多数情况下也不用考虑内存泄露.<br>虽然实际情况下, php进程受上层管理界面的影响, 并不是像 cli<br>模式那样执行一次并退出, 但对开发者而言, 其中细节可以忽略.</p><p>回到 phpdaemon 本身吧,<br>phpdaemon是一个在event和eio两个pecl扩展之上开发的异步网络框架, 类似于 python<br>中的 tornado , 它采用的单进程单线程异步IO的网络模型,<br>可用于开发异步非阻塞的应用.</p><p>前面说 phpdaemon 是单进程单线程的网络模式, 严’意义上讲是指它的worker. phpdaemon<br>以 master + workers 方式运行, master只负责分发任务, 在worker<br>进程才进行请求内容的处理工作.</p><p>在 phpdaemon 中, 一个进程中会启用多个服务实例,  每个实例对应一个 appinstance.<br>开发者将不同的处理逻辑封装成为不同的 app, 在异步调度中各司其职.</p><p>master 在接受到请求之后, 向 AppResolver 发起查询, Resolve 根据上下文,<br>返回一个对应的应用实例名称. 比如需要返回一个静态文件, 那么可以返回一个<br>FileReader 实例, 实例的Request 方法中完成异步并向客户端输出文件内容.<br>而最常见的任务是返回一个动态页面的内容, 这种类型的任务, 在 phpdaemon 中抽象为<br>HttpRequest 类型.   一个常规cms中的前端和后台界面,<br>可以分装成两个不同的appInstance, 在resolver实现对应的判断逻辑,<br>正确路由到对应的appInstance上, 然后再决定发起哪一个 Request 类型.</p><p>这种关系有点像 MVC 框架中的C. 大部分php web 框架的 controller<br>中会包含多个action, 在 phpdaemon 中, <code>PHPDaemon\Core\AppInstance</code><br>可以认为是controller, 而action则对应着 client\Request.</p><p>为什么这里要分成 AppInstance 和 Request 两种类型呢?<br>这里涉及到并发环境中的内存管理问题. 常规的php应用是同步的, 从来不考虑这个问题.<br>一个实例最终会被释放, 多个请求之间并没有共享关系. 但是在phpdaemon中,<br>并不是这么回事. worker进程一段时间内一直驻留内存, 需要管理每次请求中用到的资源. </p><p>服务器的配置是不变的, 可以常驻内存. 对下层接口的调用结果, 不同任务之间是独立的,<br>所以任务完毕后应该释放掉.   </p><p>所以, 在并发环境下, AppInstance 不断生成新的 Request<br>对象处理任务并存储在队列当中, 而 Request 在进行网络请求的时,<br>会交出cpu并进入休眠, 等待io事件将自己唤醒. 当 Request 完成任务并返回结果,<br>AppInstance 将结果返回, 并将该 Request 实例从内存中释放.</p><p>上文提到的 Request , 并不是一般认为的 网络请求, 而是对应负责处理网络请求的<br>Service. 那么应用的网络请求又是如何发起的呢?</p><p>这里先解释下 phpdaemon 中的 pool 和 connection.</p><p>Connection, 顾名思义, 就是php代码中发起的异步网络请求, 比如常见的 curl.<br>在异步请求中, 应用发起很多网络请求, 通过事件进行调度.<br>所以同一时间存在多个网络请求, 只不过有的是活跃状态, 有的挂起等待后端返回.<br>存储和管理这些 Connection 的负责人, 就是 Pool. 这就是常说的连接池.</p><p>Java语言中的连接池, 一般通过多线程实现的. 而 PhpDaemon 中的连接池,<br>则是在libevent上实现的单进程单线程异步连接池.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;phpdaemon, 基于异步网络请求的应用服务框架&lt;/p&gt;
&lt;p&gt;一直以来, php给人的印象就是一个单进程同步的编程语言, 其魅力在于简单, 直观,&lt;br&gt;学习成本低, 容易上手, 所以市场占有率很高.&lt;/p&gt;
&lt;p&gt;流行的php模式, 从几年前的 apache + m</summary>
      
    
    
    
    <category term="async" scheme="https://io.bhe.ink/categories/async/"/>
    
    <category term="php daemon" scheme="https://io.bhe.ink/categories/async/php-daemon/"/>
    
    <category term="php" scheme="https://io.bhe.ink/categories/async/php-daemon/php/"/>
    
    <category term="network" scheme="https://io.bhe.ink/categories/async/php-daemon/php/network/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim, 经验之谈</title>
    <link href="https://io.bhe.ink/2014/03/22/introduction-to-vim/"/>
    <id>https://io.bhe.ink/2014/03/22/introduction-to-vim/</id>
    <published>2014-03-22T16:21:44.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>Vim, 老生常谈的话题了. </p><blockquote><p>the editor</p></blockquote><p>在程序员之间谈编辑器是一个敏感话题, 会有很多人跳出来挑起圣战, 还是蛮头疼的一件事情.</p><p>从Vim开始, 是一种有别于IDE的编码方式, 但仅仅是方式, 就像是拿叉还是拿筷子, 取决于你吃西餐还是中餐.</p><p>无论使用的是文本编辑器还是 IDE , 都是服务于编写源代码这么个目的. 它们之间的区别在于, 前者在编码中与环境互动, 后者则是提供一个既定的环境完成编程. 相同的是, 两者都会不断改善.</p><p>过程有所不同, 但目的是相同的. 深究下去也就是比较赛百味和麦当劳的口味罢了.</p><p>Vim 提供了两个基本的功能框架, 构成了其复杂的生态环境.</p><p>首先是模式切换. </p><p>功能繁多的键位操作, 基于 <code>Normal</code> 和 <code>Insert</code> 两种模式的交替进行. 正是<code>模式</code>这个特性, 使得vim有别于其他以组合键方式进行操作的编辑器(or IDE). 在<code>Normal</code>模式下进行文本操作, 在<code>Insert</code>模式下进行文本输入, 并且可以通过<code>:map</code>系列命令简化和扩充可用的操作.</p><p>除了 hkjl asdcx 这些简单的移动和crud, vim 还支持按键序列的组合. </p><ul><li>删除一个单词? <code>de</code></li><li>删掉10行? <code>d10j</code></li><li>清空整个文件? <code>ggdG</code></li></ul><p>是不是有种玩街霸拳皇搓招的快感呢 XD</p><p>还有基于文本对象(text-objects^[1])的操作, 比如 <code>yi(</code> 表示 <code>yank inner () block</code>,  按下 <code>p</code> , 那么屏幕上将复制一份()里面的文本. 如果换成 <code>ya(</code>, 则表示包含<code>(</code>整块文本.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(text) =&gt; (text)text</span><br><span class="line">[text] =&gt; [text]text</span><br></pre></td></tr></table></figure><p>^[1]: 更多内容见 <code>:h text-objects</code></p><p>此之外, 还有<code>command</code>和<code>visual</code>, 分别用于输入命令,和可视化文本选择.</p><p>比如需要一个命令的输出, 比较<del>笨</del>常规的方法就是去shell里面执行再重定向到文件, 然后通过vim打开进行合并. 可是 vim 支持<code>!</code>直接执行shell命令, 再加上<code>r</code>命令重定向到当前文本就行了. 举个例子, 当前系统时间可以这么拿到.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r!date</span><br></pre></td></tr></table></figure><p>至于<code>visual mode</code>, 举个最简单例子吧, 要删除一段文本需要怎么操作? 按下<code>v</code>,<br>进入visual模式, 这时候通过hjkl移动, 经过的所有文本会处于高亮状态,<br>这时候把它们当成一个字符, 所有针对单个字符的操作都可以应用上去, 比如按下<code>d</code>,<br>那么这段文本就被删除掉了.</p><p>但是如果需要插入文本咋办? 这时候就要使用强大的<code>blockwise-operators</code>, </p><p>如果要删除每一行的第一个字母, 按下<code>&lt;CTRL-V&gt;</code>, 高亮需要删除的内容, 再按<code>d</code>删除.</p><p>如果要在每一行的行首插入, 按下<code>&lt;CTRL-V&gt;</code>, 高亮内容, 再按<code>I</code>, 输入一段文字, 再按<code>&lt;Esc&gt;</code>, 这时候每一行都会插入对应的字符.<br>完整的操作是 <code>I&#123;string&#125;&lt;Esc&gt;</code>.</p><p>这些操作在处理多行数组相当方面, 省去了写正则的麻烦.</p><p>再提一个有趣的例子, 通过vim码字的时候, 常常遇到一个问题就是换行.<br>经常打了大段文字懒得敲回车. vim中有一个选项, 叫<code>textwidth</code>, 当文本超过一定字符,<br>会自动折行. 配合visual模式, 对高亮文本按下<code>gq</code>, 瞬间自动格式化完毕.</p><pre><code>更多操作, 见 :h visual-operators</code></pre><p>第二, <code>vim script</code></p><p>前面提到的<code>command</code>模式, 就是vim脚本的交互式shell. vim丰富的扩展功能, 也就是<br>plugin , 一个又一个脚本, 放置在不同的目录中, 经过不同的顺序加载实现的.</p><p>值得一提的是, vim 支持通过 python, lua 等语言的解释器, 编译的时候加上对应选项, 就可以在vim脚本中调用额外的python或者lua脚本, 通过这些语言的lib, 是的vim更加强大了.</p><p>由于vimscript相当复杂, 这里就不介绍了, 顺便说说plugin的管理和推荐.</p><p>常规的安装流程, 就是把脚本一股脑复制到 ~&#x2F;.vim 目录中去, 个个插件的 autload  plugin 目录下文件会混杂在一起, 管理复杂, 想删都删不了. </p><p>这里推荐使用, <code>pathogen</code> 和 <code>vundle</code> 进行组合管理.</p><p>pathgen和 vbundle 是两个类似的插件管理器, 区别在于 vbundle 支持配置自动去github下载脚本, 省了不少同步的麻烦. </p><p>并非所有的vim插件都支持通过 github 下载, pathogen 就派上用场了, 虽然它只支持手动管理. 将插件所有内容解压到 <code>~/.vim/bundle/&#123;plugin name&#125;/</code>, pathogen 在vim启动过程中会自动加载所有的插件.</p><p>这里附上我的配置文件内容.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">version</span> &gt; <span class="number">703</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g:pathogen_disabled</span> = [ </span><br><span class="line">            \,<span class="string">&quot;conque_term&quot;</span></span><br><span class="line">            \]</span><br><span class="line">    <span class="keyword">call</span> pathogen#runtime_append_all_bundles() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">call</span> vundle#rc(<span class="string">&quot;~/.vbundle/&quot;</span>)</span><br><span class="line">    <span class="keyword">source</span> $HOME/.<span class="keyword">vim</span>/<span class="keyword">conf</span>.d/vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过pathogen加载vundle和其他非github插件, 再通过vundle加载其他的插件.</p><p>将vundle的 bundle 目录放置于 ~&#x2F;.vim 之外, 好处是可以直接将 整个 vim 目录软链到网盘目录里, 随时保持同步, 而 vundles 则手动更新.</p><p>推荐下我自己在用vunle清单, 也就是上面的 <code>$HOME/.vim/conf.d/vundle.vim</code> 的内容.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&quot; 视觉系</span><br><span class="line">Bundle &#x27;Lokaltog/vim-powerline&#x27;</span><br><span class="line">Bundle &#x27;altercation/vim-colors-solarized&#x27;</span><br><span class="line"></span><br><span class="line">&quot; 文件搜索 编码转换</span><br><span class="line">Bundle &#x27;kien/ctrlp.vim&#x27;</span><br><span class="line">Bundle &#x27;mbbill/fencview&#x27;</span><br><span class="line">Bundle &#x27;rking/ag.vim&#x27;</span><br><span class="line"></span><br><span class="line">&quot; buffer, 目录, 任务, tag浏览</span><br><span class="line">Bundle &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line">Bundle &#x27;fholgado/minibufexpl.vim&#x27;</span><br><span class="line">Bundle &#x27;majutsushi/tagbar&#x27;</span><br><span class="line">Bundle &#x27;vim-scripts/TaskList.vim&#x27;</span><br><span class="line"></span><br><span class="line">&quot; 代码补全, 生成</span><br><span class="line">Bundle &#x27;SirVer/ultisnips&#x27;</span><br><span class="line">Bundle &#x27;Shougo/neocomplete.vim&#x27;</span><br><span class="line">Bundle &#x27;scrooloose/nerdcommenter&#x27;</span><br><span class="line">Bundle &#x27;DoxygenToolkit.vim&#x27;</span><br><span class="line">Bundle &#x27;Rip-Rip/clang_complete&#x27;</span><br><span class="line"></span><br><span class="line">&quot; 语法检查, 调试</span><br><span class="line">Bundle &#x27;scrooloose/syntastic&#x27;</span><br><span class="line">Bundle &#x27;joonty/vdebug&#x27;</span><br><span class="line"></span><br><span class="line">&quot; 其他</span><br><span class="line">Bundle &#x27;msanders/cocoa.vim&#x27;</span><br><span class="line">Bundle &#x27;gmarik/vundle&#x27;</span><br><span class="line">Bundle &#x27;L9&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总的来说, vim 学习成本比较高, 针对不同语言需要熟悉并定制, 才能拥有对应的功能.<br>我同时也用phpstorm, 对于那些觉得不错的功能, 会考虑在vim中寻找相同的功能的plugin.<br>语法检查, 补全这些有限支持也就够了, 重构功能也就是偶尔体验体验.毕竟, 这是用工具编码, 而不是工具教你如何写代码.</p><p>写代码的时候, 开启终端, 打开vim, 调用一下shell.<br>只想浏览代码的时候, 我还是回开下 phpstorm , 配置好库和环境, 通过鼠标穿梭于文件之间. </p><p>至于两者的差别, 呵呵. 物尽其所用罢了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vim, 老生常谈的话题了. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在程序员之间谈编辑器是一个敏感话题, 会有很多人跳出来挑起圣战, 还是蛮头疼的一件事情.&lt;/p&gt;
&lt;p&gt;从Vim开始, 是一种有别于IDE</summary>
      
    
    
    
    <category term="tutor" scheme="https://io.bhe.ink/categories/tutor/"/>
    
    <category term="vim" scheme="https://io.bhe.ink/categories/tutor/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义 zsh 自动补全功能初探</title>
    <link href="https://io.bhe.ink/2014/03/16/first-step-on-writing-zsh-completion-functions/"/>
    <id>https://io.bhe.ink/2014/03/16/first-step-on-writing-zsh-completion-functions/</id>
    <published>2014-03-16T18:43:53.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>zsh 已经不是什么新鲜事了, <code>oh-my-zsh</code> 相信很多人都已经在用了.</p><p>但<code>zsh</code> 存在一个明显的问题, 它并不是什么开箱即用的工具, 需要大量配置, 也很难上手扩充新功能, 这点和vim非常相似.</p><p>常用的 alias 和 shell script, 虽然能用上些稍微方便的特殊语法, 大部分仍和 bash 相近. 这时候倒不如使用bash的语法, 保证代码的兼容性和可移植性.</p><p>本文简单介绍如何编写zsh的补全插件, 以 Mac OS 的 launchctl 为例.</p><pre><code>`launchctl` 是 Mac 用于管理系统运行, 类似于 linux 的 systemd, 用于管理 LaunchAgent 加载, 是 `launchd` 的前端.</code></pre><p>常用的 subcommand 有 unload, load, stop ,start 等等. 这里就只考虑 load 和 unload 补全功能扩充.</p><h2 id="怎么开发脚本"><a href="#怎么开发脚本" class="headerlink" title="怎么开发脚本"></a>怎么开发脚本</h2><p>按作者的话说, 看文档是很难学会的. 因为很少涉及脚本编写本身, 仅罗列了所有的接口.</p><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><p>首先将脚本命名为 <code>_launchctl</code> , 放到任意目录下, 让将目录加入 fpath</p><pre><code>oh-my-zsh 用户保存在 ~/.oh-my-zsh/plugins/launchctl/_launchctl.并在 zshrc 中声明 plugins=( launchctl )剩下的事情就交给 oh-my-zsh</code></pre><p>脚本头部加上以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#compdef launchctl</span></span><br></pre></td></tr></table></figure><p>第一行标记这个文件包含一个自动加载的函数.<br>本质上这是一个没有形如 <code>function () &#123;&#125;</code> 包裹着的函数体,<br>和可以直接通过 <code>source</code> 导入的配置文件和脚本是不同的.</p><h2 id="subcommand-补全"><a href="#subcommand-补全" class="headerlink" title="subcommand 补全"></a>subcommand 补全</h2><p>subcommand 应该是子命令或者副命令的意思， 这里保留原文。</p><pre><code>ps: 对于 gnu 风格的命令行工具, 很少有 subcommand , 这一章节并不是必要的.</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">local -a _1st_arguments</span><br><span class="line"></span><br><span class="line">_1st_arguments=(</span><br><span class="line">    &quot;load:Load configuration files and/or directories&quot;</span><br><span class="line">    &quot;unload:Unload configuration files and/or directories&quot;</span><br><span class="line">    &quot;start:Start specified job&quot;</span><br><span class="line">    &quot;stop:Stop specified job&quot;</span><br><span class="line">    &quot;help:This help output&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">local label_subcommand=&quot;launchctl subcommand&quot;</span><br><span class="line"></span><br><span class="line">if (( CURRENT == 2 )); then</span><br><span class="line">    _describe -t commands &quot;$label_subcommand&quot; _1st_arguments</span><br><span class="line">    return 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这段代码还是比较好懂的, 补全所有的<code>subcommand</code>并给出提示信息.</p><p>注意 <code>CURRENT</code> 这个变量, 它标记处于命令行的第几个单词</p><pre><code>关于 CURRENT , 见 `man zshcompwid`</code></pre><p>在按下tab之前, 用户输入的文本为 <code>launchctl&lt;空格&gt;&lt;tab&gt;</code>, 第一个单词是主命令<code>launchctl</code>, 显然在这段脚本中, <code>CURRENT</code> 是一个大于2的整数.</p><p>对于还存在更下一级 subcommand 的补全, 以此类推.</p><h2 id="文件补全"><a href="#文件补全" class="headerlink" title="文件补全"></a>文件补全</h2><p><code>launchctl unload</code> 用于关闭一个正在运行的服务, 比如nginx, php-fpm等等, 显然这里需要补全的是一个文件路径, 对应一个位于 <code>~/Library/LaunchAgents/</code> 下的 <code>plist</code> 文件.</p><p>首先假设已经实现了对应的工具函数 <code>_get_loaded_user_plists</code> , 这个函数将生成目前正在运行的plist文件列表</p><p>以下是关键代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">local</span> expl</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$words</span>[2]&quot;</span> <span class="keyword">in</span> </span><br><span class="line">    unload)</span><br><span class="line">        <span class="built_in">local</span> loaded_user_plists</span><br><span class="line">        loaded_user_plists=<span class="string">&quot;<span class="subst">$(_get_loaded_user_plists)</span>&quot;</span></span><br><span class="line">        _wanted loaded_user_plists expl <span class="string">&#x27;running jobs&#x27;</span> compadd -a loaded_user_plists</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 1</span><br></pre></td></tr></table></figure><p>可见对于简单参数的补全实现是很轻松的</p><p>zsh 如果发现补全函数返回0, 会将输出作为补全内容作为候补内容输出到终端中去.</p><p>因此我们只需要确定 subcommand 是我们所预期的<code>unload</code> , 将文件列表发送给用户就行了.</p><p>这里用<code>case</code> 根据 subcommand 的不同, 选择对应的补全形式.</p><p>首先注意 <code>$words</code> 这个变量, 通过打印该变量可以发现, 它是一个将用户已经输出的命令拆分的数组</p><p>比如输入 <code>launchctl unload</code> , 那么对应的words将是 <code>( &#39;launchctl&#39; &#39;unload&#39; &#39;&#39; )</code>, 最后一位是一个空字符串.</p><pre><code>严格地说, 这里拆分依据并不是空格如果你明白 $@ 和 $# 区别, 你就懂我啥意思了. 这里空间不够, 我就不写了 :)</code></pre><h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><p>开发过程中难免写错, 需要重复调试, 这里有两个小技巧.</p><ol><li>echo</li></ol><p>echo 当然是喜闻乐见的 debug 指令之一了.</p><ol start="2"><li>set -x</li></ol><p><code>set -x</code> 将开启zsh的 XTRACE 选项, 所有运行脚本背后的指令和参数都直接打印到屏幕, 俗称上帝视角.<br>如果发现不能正常执行, 那么只要运行 <code>set -x</code>, 手动输入命令后按tab. </p><blockquote><p>ps1: set +x 恢复正常模式.<br>ps2: 千万不要手残提前触发其他zsh的特性, 不然面对满屏的文本里就没啥心情继续下去了. 这里需要老老实实输入完整的命令, 在需要触发对应补全过程的地方按下tab触发补全.</p></blockquote><p>由于调试信息实在太多了, 运行几次之后可以把调试窗口关了, 或者将终端的buffer清空, 总而言之, 减少输出的log以快速定位问题.</p><pre><code>至于更细节的内容以及相关api文档, 请看手册 `man zshcompsys`zsh 的~~破手册~~跟天书一样的文档也没打算解释清楚, 我能说的只有这么多了更多技术细节请自行深挖.</code></pre><p>Job done!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;zsh 已经不是什么新鲜事了, &lt;code&gt;oh-my-zsh&lt;/code&gt; 相信很多人都已经在用了.&lt;/p&gt;
&lt;p&gt;但&lt;code&gt;zsh&lt;/code&gt; 存在一个明显的问题, 它并不是什么开箱即用的工具, 需要大量配置, 也很难上手扩充新功能, 这点和vim非常相似.&lt;/p</summary>
      
    
    
    
    <category term="zsh" scheme="https://io.bhe.ink/categories/zsh/"/>
    
    <category term="script" scheme="https://io.bhe.ink/categories/zsh/script/"/>
    
    <category term="tutorial" scheme="https://io.bhe.ink/categories/zsh/script/tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>基于 composer 的classmap生成器</title>
    <link href="https://io.bhe.ink/2014/03/07/classmap-generating-by-composer/"/>
    <id>https://io.bhe.ink/2014/03/07/classmap-generating-by-composer/</id>
    <published>2014-03-07T10:18:00.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>近期花了不少功夫在优化线上代码构建方案上, 过程中的一些心得会不定期更新.</p><p>先前的做法是发布之后调用一个yii的扩展, 生成Classmap文件, 包含了类名和绝对路径的映射关系.</p><p>这么做的好处自然是在 <code>autoload</code> 上最大限度地减轻消耗, 每个类加载 <code>autoloader</code> 仅仅需要检查一下 <code>classmap</code> , 剩下的工作交给 <code>apc</code> 就行了.</p><p>最近在进行 <code>composer</code> 迁移的过程中, 发现composer其实自带了这么一个功能: <code>dump-autoload</code>, 而且生成的 ClassMap 文件在运行时通过路径拼接, 而不是用相对路径, 同样不会影响到  <code>apc</code> 的缓存功能.</p><p>实现这个功能仅仅需要以下改动</p><p>composer.json</p><pre><code>&#123;      &quot;autoload&quot; : &#123;              &quot;classmap&quot; : [                          &quot;src/components&quot;,                          &quot;src/controller&quot;               ]      &#125;&#125;</code></pre><p>spec文件中加入</p><pre><code>BuildRequires: t-search-composer-cli/opt/tsearch/bin/composer dump-autoload</code></pre><p>在应用初始化过程加入类似以下步骤</p><pre><code>$classMap = require &quot;vendor/composer/autoload_classmap.php&quot;;Yii::$classMap  = array_merge( Yii::$classMap, $classMap);</code></pre><p>对于已经用上composer的项目管理依赖的情况下, 这种做法自然不是需要的, composer 的 <code>install</code> 指定会自动完成 <code>classmap</code> 生成工作.</p><p>但是如果不需要依赖 <code>composer</code> 进行依赖管理的情况下, 通过 <code>dump-autoload</code> 指令来提供可用的 classmap, 简单而又效果显著.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期花了不少功夫在优化线上代码构建方案上, 过程中的一些心得会不定期更新.&lt;/p&gt;
&lt;p&gt;先前的做法是发布之后调用一个yii的扩展, 生成Classmap文件, 包含了类名和绝对路径的映射关系.&lt;/p&gt;
&lt;p&gt;这么做的好处自然是在 &lt;code&gt;autoload&lt;/code&gt;</summary>
      
    
    
    
    <category term="php composer classmap" scheme="https://io.bhe.ink/categories/php-composer-classmap/"/>
    
    
  </entry>
  
  <entry>
    <title>Composer 实战</title>
    <link href="https://io.bhe.ink/2013/08/04/composer-in-action/"/>
    <id>https://io.bhe.ink/2013/08/04/composer-in-action/</id>
    <published>2013-08-04T00:09:00.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Composer 是什么?</strong></p><p>按官方文档</p><blockquote><p>Composer 是一个 PHP 的依赖管理工具. 它可以自动安装项目中声明依赖的库.</p></blockquote><p><strong>为什么要使用 composer , 而不是传统的 pear 等?</strong></p><p>Compoesr 是一个类似于 ruby-rubygems, nodejs-npm, python-pip 的依赖管理工具. 相比起pear简单的安装功能, Composer 注重包之间的依赖关系, 每个项目可以独立管理自己的依赖, 而不是一股脑全部安装上. 另外也解决开源组件混乱的 autloader.</p><p>当前的 php 框架社区中活跃成员(比如 Symfony, Slim, Laravel, 以及开发中的 Yii2) 纷纷支持 composer , 旺盛的生命力已经不是 pear 之类的老掉牙的社区方案可以比拟了.</p><p>相对于 ruby, python, nodejs, php总算有了一个相对完善并且流行的包管理器.<br>目前社区和开发者之间的距离还比较大. pear, pyrus, composer 会继续并存下去, 给 php 开发者带来更多的麻烦.<br>长期而言, 打个你死我活, 最后只剩一个是符合开源社区的历史发展规律的 :)</p><h2 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h2><p>安装具体步骤参考 <a href="http://getcomposer.org/">http://getcomposer.org</a> , 简单运行一下命令</p><pre><code>curl -sS https://getcomposer.org/installer | php</code></pre><p>最新版本的 composer.phar 就下载到本地了.</p><p>相比起 <code>npm</code> <code>pip</code> 等被大部分发行版内置或者仓库支持的包管理器, 这种自己手动下载方式相对不够友好, 毕竟 composer 的知名度暂时还追不上 pear 等老牌工具, 被周边社区还需要一定的时间.</p><p>常用命令官方站点上有简(jian)洁(lou)的文档, </p><pre><code>installsearchshowupdatecreate-project</code></pre><p>按前面的方式下载之后, 使用composer 需要用 <code>php composer.phar help</code> 这样丑陋的方式, 嫌麻烦可以手工移动到phar到 <code>$PATH</code> 对应的相关文件夹中去, 顺便改名为 composer 会顺眼一些.</p><blockquote><p>注意文件的可执行权限, (chmod +x composer)</p></blockquote><p>用法是比较简单的, 关键是发布者和用户注意用 composer.json 准确地描述相关的依赖和加载细节.</p><h2 id="依赖入门"><a href="#依赖入门" class="headerlink" title="依赖入门"></a>依赖入门</h2><p>先给一份简单的例子</p><ul><li>一个简单的工具集, 版本号 1.0.0</li><li>依赖 net&#x2F;http , 用来处理http请求, 而不是直接用 Curl</li><li>开发模式下依赖 phpunit, 方便运行单元测试</li><li>使用 psr-0 规范的加载方式, 源代码位于 src 目录中, 将 <code>Utils</code> 映射到该目录</li></ul><figure class="highlight json"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;example/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;library&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;license&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;proprietary&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Mr Right&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span>  <span class="string">&quot;mr.right@taobao.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoload&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;psr-0&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Utils\\&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;src/&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;require&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;net/http&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;require-dev&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;phpunit/phpunit&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例子包含了一个包信息中常见字段, <code>require</code> 不一定需要, 但这是依赖管理的精华所在, 后续章节再仔细说明.</p><blockquote><p>刚开始可能对 composer.json 的语法不太熟悉, 可以通过 <code>composer validate</code> 检查自己书写风格是否符合规范</p></blockquote><h2 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h2><p>还是例子先行</p><pre><code>trunk/    src/        Utils/            NetWork/                WangWangMsg.php        composer.json        phpunit.xml        tests/        bootstrap.php        Utils/            Network/                WangWangMsgTest.php       </code></pre><p>composer 提供了灵活 <code>autoload</code> 机制, 文件的摆放方式可以很灵活, 但过分奔放的 style 不是好事. 以上结构参考自 <code>Monolog</code>, 一个强大的日志工具, 也考虑到了phpunit的使用.</p><blockquote><p>推荐将 phpunit 也作为依赖之一加入 <code>require-dev</code> , 方便开发调试. 与 <code>require</code> 字段不同的是, 只有显式使用 <code>composer install --dev</code> 才会安装上 <code>require-dev</code> 的相关组件.</p></blockquote><p>对于用户而言, 使用第三方包, 最不希望的应该就是牵扯进 autoloader 的细节. 以往的 php 源码包都有自带autoloader 的毛病, 复杂的 autoloader 交织在一块往往给使用者造成麻烦. 相比之下 composer 使用统一的方案, 优雅地解决了这个难题. </p><h3 id="autoloading-与-命名空间"><a href="#autoloading-与-命名空间" class="headerlink" title="autoloading 与 命名空间"></a>autoloading 与 命名空间</h3><p>composer 目前支持三种 autoloading 方式</p><ul><li><code>psr-0</code> 根据 psr-0 规范命名空间和文件路径进行类加载, 最佳实践方式.</li><li><code>classmap</code> 生成类与文件的映射关系文件, 安装时自动扫描并生成.    </li><li><code>file</code> 可以理解为预先加载指定文件, 每次请求中都会执行</li></ul><p>这里简单说说 psr-0, 参考 utils 这个包的配置文件</p><figure class="highlight json"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;autoload&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;psr-0&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Utils\\&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;src/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>在安装之后 composer 生的classmap 信息文件之一, <code>vendor/composer/autoload_namespaces.php</code> 中可以看到以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;Utils\\&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$baseDir</span> . <span class="string">&#x27;/src&#x27;</span>), <span class="comment">// HERE!</span></span><br><span class="line">        <span class="string">&#x27;Symfony\\Component\\Yaml\\&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$vendorDir</span> . <span class="string">&#x27;/symfony/yaml&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;Net_&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$vendorDir</span> . <span class="string">&#x27;/net/http/src&#x27;</span>),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>可见进行相关类的自动加载是, composer autoloader 通过查表和路径搜索的方式, 正确地找到类相关的代码.</p><p>比如一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Utils\Network\WangWangMsg</span>();</span><br><span class="line">    <span class="comment">//or new Utils\Network_WangWangMsg();</span></span><br></pre></td></tr></table></figure><p>实际运行时, 实际运行的逻辑类似于以下的伪代码</p><figure class="highlight php"><figcaption><span>test.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//composer</span></span><br><span class="line">    <span class="variable">$baseDir</span> = <span class="variable">$root</span> . <span class="string">&#x27;vendor/example/utils&#x27;</span>;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$baseDir</span> . <span class="string">&#x27;/src/Utils/Network/WangWangMsg.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Utils\Network\WangWangMsg</span>();</span><br></pre></td></tr></table></figure><h2 id="项目中使用-composer"><a href="#项目中使用-composer" class="headerlink" title="项目中使用 composer"></a>项目中使用 composer</h2><p>在 composer 设计理念中, 项目和包并不是两种割裂的定义, 所有的源代码都归属于对应的包, 包与包存在依赖关系.<br>虽然在实际业务开发中, 暂时没哪个项目如此纯粹, 但这并不影响 composer 的应用.</p><p>以下是一个简单的搜索结果页应用如何书写 composer.json.</p><figure class="highlight json"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;repositories&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;packagist&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span> <span class="comment">//禁用外部仓库</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// 引入内部代码仓库(svn)</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;svn&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http://.../mido&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;branches-path&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tags-path&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span>  <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mido/mido&quot;</span><span class="punctuation">:</span><span class="string">&quot;dev-trunk&quot;</span> <span class="comment">//使用 svn 中的 trunk 分支</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>运行 <code>composer install</code> 时, composer 预先扫描所有的 repositories, 将 require 字段中的包更新载入到 vendor 目录中去, 并生成相关缓存信息和自动加载代码.</p><p>然后呢?</p><p>在应用 bootstrap (对于大部分项目, index.php 可能是一个更加容易理解的名字)代码中加入以下代码</p><figure class="highlight php"><figcaption><span>index.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require</span> /path/to/root/vendor/autoload.php</span><br></pre></td></tr></table></figure><p>接着项目代码中尽情使用吧, 毕竟自动加载类的细节都已经交给 autoloader 了.</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>这里介绍怎么使用 composer 作为 yii 1.x 的依赖管理工具. (注意, yii1.x 不符合 psr-0, 直接使用 composer 比较困难)</p><p>安装好了依赖, 接下来讲解怎么处理利用代码. 这里先用yii自带的demo helloworld 作为例子.</p><p>复制文件(yii&#x2F; 目录下存放最新的yii 1.x 代码):</p><pre><code>cp -r yii/demos/helloworld ./cp -r yii/framework helloworld/protected/</code></pre><p>目录结构如下:</p><pre><code>helloworld/    index.php    protected/        composer.json //composer 配置信息        framework/  //yii 框架文件        vendor/     //composer安装依赖的位置</code></pre><figure class="highlight json"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;repositories&quot;</span>  <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;composer&quot;</span>.</span><br><span class="line">            <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http://packages.phundament.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;require&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;php&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&gt;=5.3.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yiiext/migrate-command&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;psr/log&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;autoload&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;classmap&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;framework/YiiBase.php&quot;</span><span class="punctuation">,</span> <span class="string">&quot;framework/yii.php&quot;</span> <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;config&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vendor-dir&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;vendor&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>index.php 使用以下代码替代原来的 yii.php</p><figure class="highlight php"><figcaption><span>composer.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;protected/vendor/autoload.php&quot;</span>;</span><br></pre></td></tr></table></figure><p>将 framework 和 composer.json 放在 protected 文件中, 方便通过 webserver 访问规则屏蔽代码文件. 文件结构可以根据实际需求做调整, 这对于 composer 来说都这可以正确找到代码.</p><p>接下来 进入 protected 目录中 运行 composer install -vvv , 更新composer信息, 生成 classmap.</p><pre><code>php -S 127.0.0.1:8080        </code></pre><p>应用就跑起来了.</p><h2 id="主搜索应用前端公共库-mido-改造实战"><a href="#主搜索应用前端公共库-mido-改造实战" class="headerlink" title="主搜索应用前端公共库 mido 改造实战"></a>主搜索应用前端公共库 mido 改造实战</h2><p>mido 是我们使用一个公共包, 负责了大部分引擎请求的细节, 在业务代码中屏蔽了请求, 解析等细节.</p><p><strong>1. 规范svn路径</strong></p><p>严格区分<code>trunk</code>, <code>tag</code>, <code>branches</code>. composer 对于svn的支持相对弱一些, branches 和 tag 都可以别名, 或者禁用, 但是 trunk 好像必须要有.</p><p>目前 mido 只有 trunk 一个目录, 并没有严格按版本号发布, 所以项目的 <code>require</code> 字段填上 <code>&quot;mido/mido&quot; : &quot;dev-trunk&quot;</code> 就行了.</p><pre><code>/trunk/branches/2.0.1-beta/tag/1.0.0</code></pre><p><strong>2. 源代码命名空间处理1 : 用 \ 替换 _</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     Mido_Exception -&gt; Mido\<span class="built_in">Exception</span></span><br></pre></td></tr></table></figure><p>严格意义上说, 这并不是必须的. composer 支持 <code>A_B_C</code> 这种常规的写法, 在配置中写上 <code>&quot;Mido_&quot;:&quot;&quot;</code> 也行</p><p><strong>3. 源代码命名空间处理2 : 命名空间导入</strong></p><p><em>ps: 需要特别注意全局命名空间里的类名,包括不支持命名空间的库和扩展, 如ArrayAccess, Memcache</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Mido</span>\<span class="title class_">Engine</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Mido</span>\<span class="title">ComponentBase</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Kingso</span> <span class="title">extend</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">Mido</span>\<span class="title class_">Engine</span>\<span class="title class_">Kingso</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Mido</span>\<span class="title">ComponentBase</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Mido</span>\<span class="title">Engine</span>\<span class="title">RequestBase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="title">extend</span> <span class="title">RequestBase</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>当然, 以根命名空间的方式书写代码也是可以的, 看团队如何制定代码规范.</p><p><strong>3. 源代码命名空间处理: 保留关键词</strong></p><p>前缀式命名类没有和保留关键字冲突的问题, 但改用命名空间时, 在当前域需要注意扩展和内置提供的全局class, 虽然丑了点, 但是结果是好…</p><p>mido 中内置了部分常用的 helper, 比如以下的 ‘a.b.c’ 的多维数组访问 helper. 原来使用了 Array 这个关键字(呃, 因为 php 不关心大小写)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//old style</span></span><br><span class="line"><span class="title class_">Mido_Helper_Array</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$items</span>, <span class="string">&#x27;items.title&#x27;</span>);</span><br><span class="line"><span class="comment">//new style</span></span><br><span class="line"><span class="title class_">Mido\Help\MArray</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$items</span>, <span class="string">&#x27;items.title&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4. 组件别名配置更新格式</strong></p><p>为了满足多个相同引擎单例组件的使用, 配置文件里定义了映射关系, 偷懒直接写上根命名空间.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//修改前</span></span><br><span class="line"><span class="string">&quot;kingso&quot;</span> =&gt; <span class="string">&quot;Mido_Engine_Kingso&quot;</span>,</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line"><span class="string">&quot;kingso&quot;</span> =&gt; <span class="string">&quot;\\Mido\\Engine\\Kingso&quot;</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嗯, 全部的迁移成本如上.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>好处</strong></p><ul><li>方便资源共享, 方便代码分发</li><li>项目源代码结构清晰 </li><li>自带autoloading机制, 简化加载流程</li><li>社区类库支持强大</li><li>与国际接轨, 高端大气上档次 :)</li></ul><p><strong>使用成本</strong></p><ul><li>独立执行文件, 暂时没有比较好的工具集成, 暂时没见那个发行版内置.</li><li>对于频繁改动, 代码耦合严重的应用, 并没有明显成效.</li><li>需要遵守目录结果规范</li><li>支持还不够广泛, 许多第三包需要定制安装</li></ul><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><ul><li><a href="http://getcomposer.org/doc/articles/troubleshooting.md">troubleshooting.md</a></li><li><a href="http://nelm.io/blog/2011/12/composer-part-1-what-why">Composer: Part1 - What &amp; Why </a></li></ul><p><em>vim:ft&#x3D;markdown</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Composer 是什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按官方文档&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Composer 是一个 PHP 的依赖管理工具. 它可以自动安装项目中声明依赖的库.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="php, composer" scheme="https://io.bhe.ink/categories/php-composer/"/>
    
    
  </entry>
  
  <entry>
    <title>Archlinux Longene QQ 轻松上手</title>
    <link href="https://io.bhe.ink/2013/08/03/longene-qq-on-archlinux/"/>
    <id>https://io.bhe.ink/2013/08/03/longene-qq-on-archlinux/</id>
    <published>2013-08-03T01:04:00.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过-Aur-安装相关包"><a href="#通过-Aur-安装相关包" class="headerlink" title="通过 Aur 安装相关包"></a>通过 Aur 安装相关包</h3><p>完整安装 longnen qq 需要以下几个包</p><ul><li><code>wineqq</code> 主要包, 包含完整的 longene 环境和 qq 2012</li><li><code>opendesktop-fonts</code> 提供 odokai 字体, 用于中文字体显示, 不装可能导致方块字</li><li><code>ttf-ms-fonts</code> 提供 arial 用于中文显示</li></ul><p>装上了就能跑了, 基本功能都没问题.</p><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><p><strong>英文半角符号显示错位</strong></p><pre><code>字体问题, 未解决</code></pre><p><strong>没有声音</strong></p><p>需要安装声音相关的包, 64位系统装上第一个, 32位选择第二个.</p><blockquote><ul><li>lib32-alsa-plugins </li><li>alsa-plugins</li></ul></blockquote><p>64 位系统需要启用 multi 仓库才能找到 lib32 相关包, 具体操作见 <a href="https://wiki.archlinux.org/index.php/Multilib">wiki:multilib</a> </p><p>简单说, 就是找到 <code>/etc/pacman.conf</code>, 找到以下文本, 取消注释(如果没有找到就手动加入)</p><pre><code>[multilib]Include = /etc/pacman.d/mirrorlist</code></pre><p><strong>fcitx无法输入</strong></p><p>找到 <code>/opt/longene/qq2012/qq2012.sh</code>, 将其中的</p><pre><code>export LANG=zh_CN.UTF-8</code></pre><p>改为和当前系统一致的编码 (用 locale 命令查看), 比如我的是</p><pre><code>export LANG=en_US.UTF-8</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;通过-Aur-安装相关包&quot;&gt;&lt;a href=&quot;#通过-Aur-安装相关包&quot; class=&quot;headerlink&quot; title=&quot;通过 Aur 安装相关包&quot;&gt;&lt;/a&gt;通过 Aur 安装相关包&lt;/h3&gt;&lt;p&gt;完整安装 longnen qq 需要以下几个包&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="linux-desktop, app, qq, archlinux" scheme="https://io.bhe.ink/categories/linux-desktop-app-qq-archlinux/"/>
    
    
  </entry>
  
  <entry>
    <title>Zshrc: Startup Files</title>
    <link href="https://io.bhe.ink/2013/07/01/zshrc-startup-files/"/>
    <id>https://io.bhe.ink/2013/07/01/zshrc-startup-files/</id>
    <published>2013-07-01T22:54:00.000Z</published>
    <updated>2023-06-10T10:25:19.183Z</updated>
    
    <content type="html"><![CDATA[<p>shell 环境有必要保持一定的整洁性, 毕竟多台机器之间多少要做些配置环境上的同步.<br>本文简单讨论了 zsh 使用中配置文件规范性.</p><p>zsh 的 man 手册中提到, zsh 的配置加载顺序如下</p><p>最高优先级, 所有情况下都会加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/zshenv</span><br><span class="line">$HOME/.zshenv</span><br></pre></td></tr></table></figure><p>login shell 配置, 两组文件的区别在于, 中间存在着 zshrc 的加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/zprofile</span><br><span class="line">$HOME/.zprofile</span><br><span class="line"></span><br><span class="line">/etc/zlogin</span><br><span class="line">$HOME/.zlogin</span><br></pre></td></tr></table></figure><p>交互shell配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/zshrc</span><br><span class="line">$HOME/.zshrc</span><br></pre></td></tr></table></figure><p>三种配置文件的差异, 在于加载的时机不同.</p><p><code>/etc</code> 目录下的配置文件会影响机器上的所有用户, 相比起 $HOME 配置文件, 加载顺序优先级比较高<br>但是除了系统管理员, 大部分情况下就一个人用的机器, 没多大关心的必要.<br> 平时除了偶尔切换到 root 下, 基本不会考虑多用户的情况. 这里就不过多涉及了.</p><p><strong>env配置</strong></p><p>顾名思义属于环境配置, 只要新启动的shell实例, 都会重新加载. 这就意味这个文件的内容会重复加载, 不适合加入需要依赖io等耗时的操作, 影响了shell的执行速度</p><p>我通过这个配置文件, 区分不同机器, 比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VIMID=&quot;hits-office&quot;</span><br></pre></td></tr></table></figure><p>方便 vim 中可以根据<code>$VIM</code>加载工作环境下的特殊配置, 比如以 gbk 作为默认文件编码 :( .</p><p><strong>login shell</strong></p><p>部分发行版在这个配置文件中加入了<code>. $HOME/.zshrc</code> , 这种做法也意味着, 两者比较难区分.</p><p><strong>zshrc</strong></p><p>鉴于大部分人都是在交互式环境下使用 shell , 也就意味着这个文件是最常修改的配置文件, 比如著名的<code>oh-my-zsh</code>, 其入口文件便是<code>$HOME/.zshrc</code>. </p><p>刚接触shell的人, 对于 login shell 和 interactive shell 常常傻傻分不清.<br>由于对与shell的定制和配置往往是增加 function, alias, 以及补全等等, 都是为了方便shell操作, 所以大多数情况下都是修改<code>zshrc</code>实现的.</p><p>那么 <code>.zprofile</code> 是不是有点多余呢? 以下讨论 <code>.zprofile</code> 可以发挥作用的场景</p><p>场景#1: <code>export A=abc</code> 定义全局常量</p><p>仅仅在登入系统时执行一次, 某些需要调用<code>hostname</code>之类耗时的操作也可以放在这里, 不会因为重复执行而浪费 CPU 运算.</p><p>场景#2: 初始化虚拟环境</p><p>在安装 <code>rvm</code> 或者 <code>pythonbrew</code> 的情况, 需要在当前环境加载相对应的初始化脚本, 才能使用 <code>rvm use xxx</code>, <code>pythonbrew use xxx</code> 等方式修改当前 interceptor.</p><figure class="highlight plaintext"><figcaption><span>~/.zprofile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#load default profile config</span><br><span class="line">. $HOME/.profile</span><br><span class="line"></span><br><span class="line"># Load RVM into a shell session *as a function*</span><br><span class="line">[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; source &quot;$HOME/.rvm/scripts/rvm&quot;</span><br><span class="line"># Load pythonbrew into a shell session *as a function*</span><br><span class="line">[[ -s &quot;$HOME/.pythonbrew/etc/bashrc&quot; ]] &amp;&amp; source &quot;$HOME/.pythonbrew/etc/bashrc&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;shell 环境有必要保持一定的整洁性, 毕竟多台机器之间多少要做些配置环境上的同步.&lt;br&gt;本文简单讨论了 zsh 使用中配置文件规范性.&lt;/p&gt;
&lt;p&gt;zsh 的 man 手册中提到, zsh 的配置加载顺序如下&lt;/p&gt;
&lt;p&gt;最高优先级, 所有情况下都会加载&lt;/p&gt;
</summary>
      
    
    
    
    <category term="shell environment zshrc" scheme="https://io.bhe.ink/categories/shell-environment-zshrc/"/>
    
    
  </entry>
  
</feed>
